"""
Script de teste para verificar se o sistema est√° funcionando
"""

import os
import sys
import logging
from datetime import datetime

# Adiciona o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("Testando importa√ß√µes...")
    
    try:
        from config import Config
        print("‚úÖ config.py importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar config.py: {e}")
        return False
    
    try:
        from collector import NewsCollector
        print("‚úÖ collector.py importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar collector.py: {e}")
        return False
    
    try:
        from segmenter import NewsSegmenter
        print("‚úÖ segmenter.py importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar segmenter.py: {e}")
        return False
    
    try:
        from generator import BulletinGenerator
        print("‚úÖ generator.py importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar generator.py: {e}")
        return False
    
    try:
        from pipeline import BoletinsPipeline
        print("‚úÖ pipeline.py importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar pipeline.py: {e}")
        return False
    
    try:
        from visualizer import BoletinsVisualizer
        print("‚úÖ visualizer.py importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar visualizer.py: {e}")
        return False
    
    try:
        from email_sender import EmailSender
        print("‚úÖ email_sender.py importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar email_sender.py: {e}")
        return False
    
    return True

def test_config():
    """Testa se a configura√ß√£o est√° v√°lida"""
    print("\nTestando configura√ß√£o...")
    
    try:
        from config import Config
        
        # Testa cria√ß√£o de diret√≥rios
        Config.create_directories()
        print("‚úÖ Diret√≥rios criados com sucesso")
        
        # Testa valida√ß√£o de configura√ß√£o
        if Config.validate_config():
            print("‚úÖ Configura√ß√£o v√°lida")
        else:
            print("‚ö†Ô∏è Configura√ß√£o com problemas (verifique OPENROUTER_API_KEY)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def test_instances():
    """Testa se as inst√¢ncias podem ser criadas"""
    print("\nTestando cria√ß√£o de inst√¢ncias...")
    
    try:
        from config import Config
        from collector import NewsCollector
        from segmenter import NewsSegmenter
        
        # Cria inst√¢ncias b√°sicas
        collector = NewsCollector()
        print("‚úÖ NewsCollector criado com sucesso")
        
        segmenter = NewsSegmenter()
        print("‚úÖ NewsSegmenter criado com sucesso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar inst√¢ncias: {e}")
        return False

def test_dependencies():
    """Testa se as depend√™ncias est√£o instaladas"""
    print("\nTestando depend√™ncias...")
    
    dependencies = [
        'feedparser',
        'requests',
        'beautifulsoup4',
        'flask',
        'flask_cors'
    ]
    
    missing_deps = []
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} instalado")
        except ImportError:
            print(f"‚ùå {dep} n√£o instalado")
            missing_deps.append(dep)
    
    if missing_deps:
        print(f"\n‚ö†Ô∏è Depend√™ncias faltando: {', '.join(missing_deps)}")
        print("Execute: pip install -r requirements.txt")
        return False
    
    return True

def main():
    """Fun√ß√£o principal de teste"""
    print("TESTE DO SISTEMA BOLETINS IA")
    print("="*50)
    print(f"Data: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
    print("="*50)
    
    # Configura logging b√°sico
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    tests = [
        ("Depend√™ncias", test_dependencies),
        ("Importa√ß√µes", test_imports),
        ("Configura√ß√£o", test_config),
        ("Inst√¢ncias", test_instances)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name.upper()} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro no teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Relat√≥rio final
    print(f"\n{'='*50}")
    print("RELAT√ìRIO FINAL")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ SISTEMA PRONTO PARA USO!")
        print("\nPr√≥ximos passos:")
        print("1. Configure OPENROUTER_API_KEY no arquivo .env")
        print("2. Execute: python pipeline.py")
        print("3. Acesse o visualizador: python visualizer.py")
    else:
        print("\n‚ö†Ô∏è SISTEMA COM PROBLEMAS")
        print("Corrija os erros antes de continuar.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
